// Script de Teste para Drag & Drop - Execute no Console do Navegador
// Este script simula opera√ß√µes de drag and drop para identificar problemas

console.log('üß™ Iniciando testes de Drag & Drop...');

// Fun√ß√£o para contar total de pastas recursivamente
function contarPastasRecursivamente(folders) {
  let total = folders.length;
  folders.forEach(folder => {
    if (folder.subFolders) {
      total += contarPastasRecursivamente(folder.subFolders);
    }
  });
  return total;
}

// Fun√ß√£o para listar todos os IDs de pastas
function listarTodosIds(folders, nivel = 0) {
  const ids = [];
  folders.forEach(folder => {
    ids.push({ id: folder.id, name: folder.name, nivel });
    if (folder.subFolders) {
      ids.push(...listarTodosIds(folder.subFolders, nivel + 1));
    }
  });
  return ids;
}

// Teste 1: Verificar estado inicial
function teste1_verificarEstadoInicial() {
  console.log('\nüìã TESTE 1: Verificando estado inicial');
  
  const folders = window.testState?.folders || [];
  const totalPastas = contarPastasRecursivamente(folders);
  const todoIds = listarTodosIds(folders);
  
  console.log(`üìä Total de pastas: ${totalPastas}`);
  console.log('üìù IDs encontrados:', todoIds.map(item => `${item.id} (${item.name})`));
  
  return { totalPastas, todoIds };
}

// Teste 2: Simular reordena√ß√£o no mesmo n√≠vel
function teste2_simularReordenacao(sourceId, targetId) {
  console.log('\nüîÑ TESTE 2: Simulando reordena√ß√£o no mesmo n√≠vel');
  console.log(`Source: ${sourceId}, Target: ${targetId}`);
  
  const estadoAntes = teste1_verificarEstadoInicial();
  
  // Simular o processo de reordena√ß√£o
  console.log('üîÑ Simulando remo√ß√£o...');
  // Aqui seria onde a pasta √© removida
  
  console.log('üîÑ Simulando inser√ß√£o...');
  // Aqui seria onde a pasta √© inserida novamente
  
  const estadoDepois = teste1_verificarEstadoInicial();
  
  if (estadoAntes.totalPastas !== estadoDepois.totalPastas) {
    console.error('‚ùå PROBLEMA DETECTADO: N√∫mero de pastas mudou!');
    console.error(`Antes: ${estadoAntes.totalPastas}, Depois: ${estadoDepois.totalPastas}`);
    
    // Identificar qual pasta desapareceu
    const idsAntes = estadoAntes.todoIds.map(item => item.id);
    const idsDepois = estadoDepois.todoIds.map(item => item.id);
    
    const pastasDesaparecidas = idsAntes.filter(id => !idsDepois.includes(id));
    const pastasNovas = idsDepois.filter(id => !idsAntes.includes(id));
    
    console.error('üóëÔ∏è Pastas desaparecidas:', pastasDesaparecidas);
    console.error('‚ûï Pastas novas:', pastasNovas);
  } else {
    console.log('‚úÖ TESTE PASSOU: N√∫mero de pastas mantido');
  }
}

// Teste 3: Verificar estrutura de dados
function teste3_verificarEstrutura() {
  console.log('\nüèóÔ∏è TESTE 3: Verificando estrutura de dados');
  
  const folders = window.testState?.folders || [];
  
  function verificarPastaRecursivamente(folder, caminho = '') {
    const novoCaminho = caminho ? `${caminho} > ${folder.name}` : folder.name;
    
    // Verificar propriedades essenciais
    if (!folder.id) {
      console.error(`‚ùå Pasta sem ID: ${novoCaminho}`);
    }
    if (!folder.name) {
      console.error(`‚ùå Pasta sem nome: ${folder.id}`);
    }
    
    // Verificar subpastas
    if (folder.subFolders) {
      if (!Array.isArray(folder.subFolders)) {
        console.error(`‚ùå subFolders n√£o √© array: ${novoCaminho}`);
      } else {
        folder.subFolders.forEach(sub => {
          verificarPastaRecursivamente(sub, novoCaminho);
        });
      }
    }
  }
  
  folders.forEach(folder => {
    verificarPastaRecursivamente(folder);
  });
  
  console.log('‚úÖ Verifica√ß√£o de estrutura conclu√≠da');
}

// Teste 4: Simular opera√ß√£o completa de drag & drop
function teste4_simularDragDrop(sourceId, targetId, operacao = 'move') {
  console.log(`\nüéØ TESTE 4: Simulando ${operacao} completo`);
  console.log(`Source: ${sourceId}, Target: ${targetId}`);
  
  const estadoAntes = teste1_verificarEstadoInicial();
  
  try {
    // Aqui seria onde a opera√ß√£o real aconteceria
    console.log('üîÑ Executando opera√ß√£o...');
    
    // Simular delay como no sistema real
    setTimeout(() => {
      const estadoDepois = teste1_verificarEstadoInicial();
      
      console.log(`üìä Pastas antes: ${estadoAntes.totalPastas}`);
      console.log(`üìä Pastas depois: ${estadoDepois.totalPastas}`);
      
      if (estadoAntes.totalPastas === estadoDepois.totalPastas) {
        console.log('‚úÖ TESTE PASSOU: Opera√ß√£o manteve integridade');
      } else {
        console.error('‚ùå TESTE FALHOU: Pastas perdidas durante opera√ß√£o');
      }
    }, 100);
    
  } catch (error) {
    console.error('‚ùå ERRO durante simula√ß√£o:', error);
  }
}

// Fun√ß√£o principal para executar todos os testes
function executarTodosTestes() {
  console.log('üß™ === BATERIA DE TESTES DRAG & DROP ===');
  
  // Capturar estado atual para testes
  window.testState = {
    folders: [] // Ser√° preenchido dinamicamente
  };
  
  teste1_verificarEstadoInicial();
  teste3_verificarEstrutura();
  
  console.log('\nüéØ Para testar opera√ß√µes espec√≠ficas, use:');
  console.log('teste2_simularReordenacao("sourceId", "targetId")');
  console.log('teste4_simularDragDrop("sourceId", "targetId", "move")');
  
  console.log('\nüìù Para monitorar opera√ß√µes reais:');
  console.log('1. Abra o console');
  console.log('2. Execute opera√ß√µes de drag & drop');
  console.log('3. Observe os logs com emojis: üîÑ, üìÅ, üóëÔ∏è, üè†');
}

// Fun√ß√£o para monitorar mudan√ßas em tempo real
function monitorarMudancas() {
  console.log('üëÅÔ∏è Iniciando monitoramento de mudan√ßas...');
  
  let estadoAnterior = null;
  
  setInterval(() => {
    const estadoAtual = teste1_verificarEstadoInicial();
    
    if (estadoAnterior && estadoAnterior.totalPastas !== estadoAtual.totalPastas) {
      console.warn('‚ö†Ô∏è MUDAN√áA DETECTADA!');
      console.warn(`Pastas: ${estadoAnterior.totalPastas} ‚Üí ${estadoAtual.totalPastas}`);
      
      if (estadoAtual.totalPastas < estadoAnterior.totalPastas) {
        console.error('‚ùå PASTAS PERDIDAS!');
      }
    }
    
    estadoAnterior = estadoAtual;
  }, 1000);
}

// Exportar fun√ß√µes globalmente para uso no console
window.testDragDrop = {
  executarTodosTestes,
  teste1_verificarEstadoInicial,
  teste2_simularReordenacao,
  teste3_verificarEstrutura,
  teste4_simularDragDrop,
  monitorarMudancas,
  contarPastasRecursivamente,
  listarTodosIds
};

// Executar automaticamente
executarTodosTestes();

console.log('\n‚úÖ Script de teste carregado! Use window.testDragDrop para acessar as fun√ß√µes.'); 